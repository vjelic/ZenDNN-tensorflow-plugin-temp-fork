{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-6178a0e6-06c2-4ba9-a42d-25d5067b5cec",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability in question involves the use of the `memcpy` function in C++. The `memcpy` function is used to copy a block of memory from one location to another. However, if not used carefully, it can lead to buffer overflows, which can cause undefined behavior, crashes, or security vulnerabilities such as data corruption or unauthorized access to sensitive data.\n\nIn the provided code snippet, the `memcpy` function is used to copy data into a buffer. The vulnerability arises if the size of the data being copied (`cached_filter_data_size`) exceeds the size of the destination buffer. This can lead to a buffer overflow.\n\n### General Mitigation Advice\n\n1. **Bounds Checking**: Always ensure that the destination buffer is large enough to hold the data being copied. Use safer alternatives like `std::copy` or `std::memmove` when possible, which provide better type safety and can handle overlapping memory regions.\n\n2. **Use Safer Functions**: Consider using functions that perform bounds checking, such as `std::copy` from the C++ Standard Library, which can help prevent buffer overflows.\n\n3. **Static Analysis Tools**: Use static analysis tools to detect potential buffer overflows and other vulnerabilities in your code.\n\n4. **Code Reviews**: Regularly perform code reviews to catch potential vulnerabilities early in the development process.\n\n### Source Code Fix Recommendation\n\nTo fix the vulnerability, ensure that the destination buffer is large enough to accommodate the data being copied. Here is a revised version of the code:\n\n```cpp\n#include <algorithm> // For std::copy\n#include <cstring>   // For std::memcpy\n\n// Assuming necessary includes for Tensor and other dependencies\n\nvoid safeMemcpy(Tensor* cached_filter_data_, const float* weights_data, size_t cached_filter_data_size) {\n    float* destination = static_cast<float*>(cached_filter_data_->flat<float>().data());\n    size_t destination_size = cached_filter_data_->flat<float>().size() * sizeof(float);\n\n    if (cached_filter_data_size <= destination_size) {\n        std::memcpy(destination, weights_data, cached_filter_data_size);\n    } else {\n        // Handle error: destination buffer is too small\n        throw std::runtime_error(\"Buffer overflow detected: destination buffer is too small.\");\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following libraries are required:\n\n- `<algorithm>`: For `std::copy`.\n- `<cstring>`: For `std::memcpy`.\n- Tensor library: Ensure that the Tensor class and its methods are properly defined and included.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-27c71085-1b27-4424-bcda-2190608af599",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ programming arises when the `malloc` function is used incorrectly, potentially leading to memory allocation issues such as buffer overflows, memory leaks, or undefined behavior. In the specific case of `malloc(sizeof(float))`, the vulnerability may occur if the allocated memory is insufficient for the intended use, or if the allocation is not properly checked for success, leading to potential dereferencing of a null pointer.\n\n### General Mitigation Advice\n\n1. **Check for Allocation Success**: Always verify that the memory allocation was successful by checking if the returned pointer is not `NULL`.\n2. **Use `new` in C++**: Prefer using `new` and `delete` in C++ for memory management, as they provide better type safety and integration with C++ object semantics.\n3. **Proper Size Calculation**: Ensure that the size passed to `malloc` is correct and accounts for the number of elements and their type.\n4. **Free Allocated Memory**: Always free the allocated memory when it is no longer needed to prevent memory leaks.\n\n### Source Code Fix Recommendation\n\nHere is a corrected version of the code using `new` instead of `malloc`:\n\n```cpp\n#include <iostream>\n\nint main() {\n    // Allocate memory for a single float\n    float* ptr = new (std::nothrow) float;\n    \n    // Check if allocation was successful\n    if (ptr == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    *ptr = 3.14f;\n    std::cout << \"Value: \" << *ptr << std::endl;\n\n    // Free the allocated memory\n    delete ptr;\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\nThe above code example requires the following standard library:\n\n- `<iostream>`: For input and output operations.\n\n### Relevant Links\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-476: NULL Pointer Dereference](https://cwe.mitre.org/data/definitions/476.html)"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-6b0687a0-7ea1-4cd0-a6ef-e949d1fbc2d1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability in question involves the use of the `memcpy` function in C++. The `memcpy` function is used to copy a block of memory from one location to another. However, if not used carefully, it can lead to buffer overflows, which occur when data is written beyond the boundaries of the allocated memory. This can result in undefined behavior, including data corruption, crashes, and security vulnerabilities such as arbitrary code execution.\n\nIn the provided code snippet, the `memcpy` function is used to copy data into a buffer. If the size of the data being copied (`weights_data`) exceeds the size of the destination buffer (`cached_filter_data_size`), it can lead to a buffer overflow.\n\n### General Mitigation Advice\n\n1. **Bounds Checking**: Always ensure that the destination buffer is large enough to hold the data being copied. Use functions that perform bounds checking, such as `memmove_s` or `std::copy`, if available.\n\n2. **Use Safer Alternatives**: Consider using safer alternatives like `std::copy` from the C++ Standard Library, which provides bounds checking and type safety.\n\n3. **Static Analysis Tools**: Use static analysis tools to detect potential buffer overflows and other vulnerabilities in your code.\n\n4. **Code Reviews**: Regularly perform code reviews to catch potential vulnerabilities early in the development process.\n\n### Source Code Fix Recommendation\n\nTo fix the vulnerability, ensure that the size of the data being copied does not exceed the size of the destination buffer. Here is a revised version of the code using `std::copy`:\n\n```cpp\n#include <algorithm> // for std::copy\n#include <iterator>  // for std::begin, std::end\n\n// Assuming T is a type and weights_data is a pointer to the source data\n// cached_filter_data_ is a pointer to the destination buffer\n// cached_filter_data_size is the size of the destination buffer in bytes\n\nT* destination = static_cast<T*>(static_cast<Tensor*>(cached_filter_data_)->flat<T>().data());\nsize_t num_elements = cached_filter_data_size / sizeof(T);\n\n// Ensure that the number of elements to copy does not exceed the destination buffer size\nstd::copy(weights_data, weights_data + num_elements, destination);\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `<algorithm>`: Provides the `std::copy` function.\n- `<iterator>`: Provides iterator support for `std::begin` and `std::end`.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cdfbd58b-e3b8-4483-8146-bbaf4bc1c198",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability in question involves the use of the `memcpy` function in C++. The `memcpy` function is used to copy a block of memory from one location to another. However, if not used carefully, it can lead to buffer overflows, which occur when the destination buffer is not large enough to hold the data being copied. This can result in undefined behavior, including data corruption, crashes, and security vulnerabilities such as arbitrary code execution.\n\nIn the provided code snippet, the `memcpy` function is used to copy data from `weights_data` to a buffer obtained from `cached_filter_data_`. If `cached_filter_data_size` is larger than the actual size of the destination buffer, it can lead to a buffer overflow.\n\n### General Mitigation Advice\n\n1. **Bounds Checking**: Always ensure that the destination buffer is large enough to hold the data being copied. This can be done by performing explicit bounds checking before calling `memcpy`.\n\n2. **Use Safer Alternatives**: Consider using safer alternatives like `std::copy` or `std::memmove` if overlapping memory regions are involved, as they provide better type safety and can prevent some common mistakes.\n\n3. **Static Analysis Tools**: Use static analysis tools to detect potential buffer overflows and other vulnerabilities in your code.\n\n4. **Code Reviews**: Regularly conduct code reviews to catch potential vulnerabilities early in the development process.\n\n### Source Code Fix Recommendation\n\nTo fix the vulnerability, ensure that the destination buffer is large enough to hold the data being copied. Here is a revised version of the code snippet with added bounds checking:\n\n```cpp\n#include <cstring> // For memcpy\n#include <algorithm> // For std::min\n\n// Assuming cached_filter_data_ and weights_data are properly defined and initialized\nT* destination = static_cast<T*>(static_cast<Tensor*>(cached_filter_data_)->flat<T>().data());\nsize_t destination_size = /* size of the destination buffer in bytes */;\n\nif (cached_filter_data_size <= destination_size) {\n    std::memcpy(destination, weights_data, cached_filter_data_size);\n} else {\n    // Handle error: destination buffer is not large enough\n    // This could involve logging an error, throwing an exception, etc.\n}\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `<cstring>`: For the `memcpy` function.\n- `<algorithm>`: For utility functions like `std::min`.\n\n### Relevant Resources\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-052ba194-03bd-416c-9241-be0e5ea377e0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability in question involves the use of the `memcpy` function in C++. The `memcpy` function is used to copy a block of memory from one location to another. However, if not used carefully, it can lead to buffer overflows, which occur when the destination buffer is not large enough to hold the data being copied. This can result in undefined behavior, including data corruption, crashes, and security vulnerabilities such as arbitrary code execution.\n\nIn the provided code snippet, the `memcpy` function is used to copy data from `weights_data` to a buffer obtained from `cached_filter_data_`. If `cached_filter_data_size` is larger than the actual size of the destination buffer, it can lead to a buffer overflow.\n\n### General Mitigation Advice\n\n1. **Bounds Checking**: Always ensure that the destination buffer is large enough to hold the data being copied. This can be done by performing explicit bounds checking before calling `memcpy`.\n\n2. **Use Safer Alternatives**: Consider using safer alternatives like `std::copy` or `std::memmove` if overlapping memory regions are involved, as they provide better type safety and can prevent some common mistakes.\n\n3. **Static Analysis Tools**: Use static analysis tools to detect potential buffer overflows and other vulnerabilities in your code.\n\n4. **Code Reviews**: Regularly conduct code reviews to catch potential vulnerabilities early in the development process.\n\n### Source Code Fix Recommendation\n\nTo fix the vulnerability, ensure that the destination buffer is large enough to hold the data being copied. Here is a revised version of the code snippet with added bounds checking:\n\n```cpp\n#include <cstring> // For memcpy\n#include <algorithm> // For std::min\n\n// Assuming cached_filter_data_ and weights_data are properly defined and initialized\nT* destination = static_cast<T*>(static_cast<Tensor*>(cached_filter_data_)->flat<T>().data());\nsize_t destination_size = /* size of the destination buffer in bytes */;\n\nif (cached_filter_data_size <= destination_size) {\n    std::memcpy(destination, weights_data, cached_filter_data_size);\n} else {\n    // Handle error: destination buffer is not large enough\n    // This could involve logging an error, throwing an exception, etc.\n}\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `<cstring>`: For the `memcpy` function.\n- `<algorithm>`: For utility functions like `std::min`.\n\n### Relevant Resources\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b6ced1d6-d2b9-43fa-9afc-d5333314beb8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-5cd66e1b-1546-4b2c-8c19-5e5340722c67",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-c6d26209-b42d-4fa2-8462-1be403f10f97",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. These functions are often prohibited in secure coding standards.\n\nThe `getenv` function is one such function. It is used to retrieve the value of an environment variable from the process environment. The problem with `getenv` is that it returns a pointer to a string that may be overwritten by subsequent calls to `getenv`, `setenv`, or `unsetenv`. This can lead to race conditions if the application is multithreaded.\n\n## Mitigation Advice\n\nAvoid using `getenv` in multithreaded applications. If you need to use environment variables, consider copying the values into your own buffers to avoid race conditions.\n\n## Source Code Fix Recommendation\n\nInstead of using `getenv`, you can use `secure_getenv` if it's available on your platform. `secure_getenv` behaves the same as `getenv` but returns NULL if the process is being run with elevated privileges. This can help prevent privilege escalation attacks.\n\nHere's an example of how you can use `secure_getenv`:\n\n```cpp\n#include <stdlib.h>\n\nconst char* value = secure_getenv(\"MY_VARIABLE\");\nif (value != NULL) {\n    // Use the value\n} else {\n    // Handle the error\n}\n```\n\n## Library Dependencies\n\nThe `getenv` and `secure_getenv` functions are part of the C standard library, so you don't need any additional libraries to use them.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-6178a0e6-06c2-4ba9-a42d-25d5067b5cec",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 6,
                  "endLine": 956,
                  "endColumn": 48,
                  "charOffset": 41686,
                  "charLength": 169,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<float *>(\n              static_cast<Tensor *>(cached_filter_data_)->flat<float>().data()),\n          weights_data, cached_filter_data_size)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<float *>(\n              static_cast<Tensor *>(cached_filter_data_)->flat<float>().data()),\n          weights_data, cached_filter_data_size)",
                      "markdown": "`memcpy(\n          static_cast<float *>(\n              static_cast<Tensor *>(cached_filter_data_)->flat<float>().data()),\n          weights_data, cached_filter_data_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41686,
                        "charLength": 169
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<float *>(\n              static_cast<Tensor *>(cached_filter_data_)->flat<float>().data()), <size of \n          static_cast<float *>(\n              static_cast<Tensor *>(cached_filter_data_)->flat<float>().data())>, \n          weights_data,  cached_filter_data_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-27c71085-1b27-4424-bcda-2190608af599",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 39,
                  "endLine": 966,
                  "endColumn": 59,
                  "charOffset": 42133,
                  "charLength": 20,
                  "snippet": {
                    "text": "malloc(sizeof(float)",
                    "rendered": {
                      "text": "malloc(sizeof(float)",
                      "markdown": "`malloc(sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42133,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6b0687a0-7ea1-4cd0-a6ef-e949d1fbc2d1",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                },
                "region": {
                  "startLine": 775,
                  "startColumn": 6,
                  "endLine": 777,
                  "endColumn": 51,
                  "charOffset": 33371,
                  "charLength": 156,
                  "snippet": {
                    "text": "memcpy(static_cast<T *>(\n                 static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n             weights_data, cached_filter_data_size)",
                    "rendered": {
                      "text": "memcpy(static_cast<T *>(\n                 static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n             weights_data, cached_filter_data_size)",
                      "markdown": "`memcpy(static_cast<T *>(\n                 static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n             weights_data, cached_filter_data_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33371,
                        "charLength": 156
                      },
                      "insertedContent": {
                        "text": "memcpy_s(static_cast<T *>(\n                 static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()), <size of static_cast<T *>(\n                 static_cast<Tensor *>(cached_filter_data_)->flat<T>().data())>, \n             weights_data,  cached_filter_data_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cdfbd58b-e3b8-4483-8146-bbaf4bc1c198",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 4,
                  "endLine": 628,
                  "endColumn": 49,
                  "charOffset": 26614,
                  "charLength": 152,
                  "snippet": {
                    "text": "memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)",
                    "rendered": {
                      "text": "memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)",
                      "markdown": "`memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26614,
                        "charLength": 152
                      },
                      "insertedContent": {
                        "text": "memcpy_s(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()), <size of static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data())>, \n           weights_data,  cached_filter_data_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-052ba194-03bd-416c-9241-be0e5ea377e0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 4,
                  "endLine": 489,
                  "endColumn": 49,
                  "charOffset": 20255,
                  "charLength": 152,
                  "snippet": {
                    "text": "memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)",
                    "rendered": {
                      "text": "memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)",
                      "markdown": "`memcpy(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()),\n           weights_data, cached_filter_data_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_kernel_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20255,
                        "charLength": 152
                      },
                      "insertedContent": {
                        "text": "memcpy_s(static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data()), <size of static_cast<T *>(\n               static_cast<Tensor *>(cached_filter_data_)->flat<T>().data())>, \n           weights_data,  cached_filter_data_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b6ced1d6-d2b9-43fa-9afc-d5333314beb8",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not use weak/non-cryptographic random number generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_transpose_functor.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 20,
                  "endLine": 81,
                  "endColumn": 28,
                  "charOffset": 3318,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-5cd66e1b-1546-4b2c-8c19-5e5340722c67",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not use weak/non-cryptographic random number generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/kernels/zendnn/zen_transpose_functor.h"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 32,
                  "endLine": 79,
                  "endColumn": 40,
                  "charOffset": 3275,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-c6d26209-b42d-4fa2-8462-1be403f10f97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Banned C function detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensorflow_plugin/src/amd_cpu/graph/utils/utils.cc"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 25,
                  "endLine": 127,
                  "endColumn": 31,
                  "charOffset": 4192,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}